name: "JF-CLI"
on:
# TURN-OFF on every push 
  push:
    branches: 
      - main
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
  security-events: write # Required for uploading code scanning.
env:
  JF_RT_URL: "https://${{vars.JF_NAME}}.jfrog.io"
  BUILD_NAME: "eShop"
  BUILD_ID: "ga-${{github.run_number}}"
  JOB_SUMMARY: false
  JFROG_CLI_LOG_LEVEL: "DEBUG" # DEBUG, INFO, WARN, ERROR
  RT_REPO_NUGET_VIRTUAL: "ps-eshop-nuget-virtual"
  RT_REPO_NUGET_DEFAULT_LOCAL: "ps-eshop-nuget-default-local"
  RT_REPO_NUGET_DEV_LOCAL: "ps-eshop-nuget-dev-local"
  RT_REPO_NUGET_QA_LOCAL: "ps-eshop-nuget-qa-local"
  RT_REPO_NUGET_PROD_LOCAL: "ps-eshop-nuget-prod-local"
  EVIDENCE_SPEC_JSON: 'evd-spec-info.json'  # ref https://jfrog.com/help/r/jfrog-artifactory-documentation/evidence-setup
  RBv2_SPEC_JSON: "rbv2-spec-info.json"
  RBV2_SIGNING_KEY: "${{secrets.RBV2_SIGNING_KEY}}" # ref https://jfrog.com/help/r/jfrog-artifactory-documentation/create-signing-keys-for-release-bundles-v2
  DEFAULT_WORKSPACE: "${{github.workspace}}"  
jobs:
  dotnetPackage:
    name: "DotNet"
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - name: "Setup JFrog CLI"
      uses: jfrog/setup-jfrog-cli@v4
      id: setup-cli
      env:
        JF_URL: ${{env.JF_RT_URL}}
        JF_GIT_TOKEN: ${{secrets.GITHUB_TOKEN}}
        JFROG_CLI_LOG_LEVEL: ${{env.JFROG_CLI_LOG_LEVEL}}
      with:
        version: latest  #2.71.0
        oidc-provider-name: ${{vars.JF_OIDC_PROVIDER_NAME}}

    - name: "Clone VCS"
      uses: actions/checkout@v4
    - name: "Setup DotNet"
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: global.json
    - name: "Setup Node"
      uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - name: "Install .NET HTTPS Development Certificate"
      run: |
        dotnet tool update -g linux-dev-certs
        dotnet linux-dev-certs install
    - name: "Software version"
      run: |
        # JFrog CLI version
        jf --version
        # Ping the server
        jf rt ping
        # Node version
        node -v
        npm -v
        # DotNet version
        dotnet --version
        # jf config
        jf config show

    - name: "Config jf with DotNet repos"
      run: |
          jf dotnetc --global --repo-resolve ${{env.RT_REPO_NUGET_VIRTUAL}}

    - name: "list folder"
      run: |
          pwd
          tree .
          jf config show

    - name: "DotNet: Summary"
      run: |
          echo "# :frog: DotNet: Summary :pushpin:" >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " - Installed JFrog CLI [$(jf --version)](https://jfrog.com/getcli/) " >> $GITHUB_STEP_SUMMARY
          echo "    - Node $(node -v) " >> $GITHUB_STEP_SUMMARY
          echo "    - NPM $(npm -v) " >> $GITHUB_STEP_SUMMARY- 
          echo "    - DotNot v$(dotnet --version) " >> $GITHUB_STEP_SUMMARY
          echo " - Configured the JFrog Cli and Docker login with SaaS Artifactory OIDC integration  " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " - Variables info" >> $GITHUB_STEP_SUMMARY
          echo "    - ID: ${{env.BUILD_ID}} " >> $GITHUB_STEP_SUMMARY
          echo "    - Build Name: ${{env.BUILD_NAME}} " >> $GITHUB_STEP_SUMMARY
          echo "    - DotNet Repo: [${{env.RT_REPO_NUGET_VIRTUAL}}](${{env.JF_RT_URL}}/webapp/#/artifacts/${{env.RT_REPO_NUGET_VIRTUAL}})" >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY

    # - name: "Curation: audit" 
    #   timeout-minutes: 15    
    #   continue-on-error: true  
    #   run: |
    #     jf ca --format=table --threads=100
  
    - name: "Xray & JAS: Audit"  
      timeout-minutes: 15 
      run: |
        jf audit --nuget --sast=true --sca=true --secrets=true --licenses=true --validate-secrets=true --vuln=true --format=table --extended-table=true --threads=100 --fail=false

    - name: "Package: Build NuGet"
      run: |  
          jf dotnet build eShop.Web.slnf --build-name ${{env.BUILD_NAME}} --build-number ${{env.BUILD_ID}}

    - name: "Package: Xray - Artifact scan"
      timeout-minutes: 15  # ref: https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idstepstimeout-minutes
      continue-on-error: true    # ref: https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idstepscontinue-on-error
      run: |
          jf scan . --format=table --extended-table=true --threads=100 --fail=false

    # Build Info
    - name: "BuildInfo: Collect env"
      run: jf rt bce ${{env.BUILD_NAME}} ${{env.BUILD_ID}} 

    - name: "BuildInfo: Add VCS info"
      run: jf rt bag ${{env.BUILD_NAME}} ${{env.BUILD_ID}} 

    - name: "BuildInfo: Build Publish"
      run: jf rt bp ${{env.BUILD_NAME}} ${{env.BUILD_ID}} --detailed-summary=true

